[config]
model = "gpt-4o-mini"
model_turbo = "gpt-4o-mini"
fallback_models = ["claude-3-5-sonnet-20241022"]
git_provider = "github"
publish_output = true
publish_output_progress = true
verbosity_level = 2
use_repo_settings_file = true
enable_help_text = true

[github]
# GitHub configuration for The Credit Pros
user_token = ""  # Set via environment variable GITHUB_TOKEN
deployment_type = "user"
ratelimit_retries = 5
base_url = "https://api.github.com"

[pr_reviewer]
# AI-powered code review with FCRA compliance focus
require_focused_review = true
require_score_review = false
require_tests_review = true
require_estimate_effort_to_review = true
require_security_review = true
enable_review_labels_effort = true
enable_review_labels_security = true
maximal_review_effort = 5
extra_instructions = """
CRITICAL: This is a credit repair application subject to FCRA regulations.

DEEP CODE LOGIC ANALYSIS REQUIREMENTS:
1. Analyze function complexity and algorithmic efficiency
2. Review data flow patterns and state management
3. Examine error handling and edge case coverage
4. Validate business logic implementation accuracy
5. Assess code maintainability and technical debt
6. Evaluate performance implications of architectural decisions

MANDATORY COMPLIANCE CHECKS:
1. FCRA Section 604 - Verify permissible purpose validation for all credit data access
2. PII Protection - Ensure all SSN, DOB, and financial data is encrypted/masked
3. Audit Trail - Validate comprehensive logging for all credit-related operations
4. Error Handling - Check for user-friendly error messages (no internal details)
5. Access Control - Verify role-based permissions for credit data access

CREDIT REPAIR DOMAIN VALIDATION:
- FICO score calculations must enforce 300-850 range with proper validation
- Credit utilization calculations must handle edge cases (0%, 100%, negative values)
- Dispute workflows must track 30-day investigation timelines with state management
- All credit bureau API calls must include retry logic, rate limiting, and circuit breakers
- Credit report generation must follow FCRA formatting requirements

ARCHITECTURAL ANALYSIS REQUIREMENTS:
- Review database schema design and relationship integrity
- Analyze API endpoint design and RESTful compliance
- Examine caching strategies and performance optimization
- Validate microservice boundaries and data consistency
- Assess scalability considerations and resource usage patterns

SECURITY REQUIREMENTS:
- No hardcoded credentials or API keys (use environment variables)
- All database queries must use parameterized statements to prevent SQL injection
- Input validation for all user-provided data with proper sanitization
- Proper authentication and authorization checks with role-based access
- Encryption at rest and in transit for sensitive credit data
- Secure session management and CSRF protection

TESTING REQUIREMENTS:
- Minimum 80% test coverage for new code with comprehensive scenarios
- Include edge cases: null values, empty collections, boundary conditions
- Mock external API calls (credit bureaus) to ensure test reliability
- Validate FCRA compliance in test scenarios with legal requirement coverage
- Integration tests for end-to-end credit repair workflows
- Performance tests for high-volume credit report processing
"""

[pr_reviewer.incremental]
enable_incremental_review = true
require_all_thresholds = false

[pr_code_suggestions]
enable_code_suggestions = true
commitable_code_suggestions = true
extra_instructions = """
Focus on:
1. FCRA compliance improvements
2. Credit calculation accuracy
3. PII data protection enhancements
4. Performance optimizations for credit workflows
5. Error handling improvements
6. Test coverage enhancements

Avoid suggesting:
- Changes that could impact FCRA compliance
- Modifications to audit trail logging
- Alterations to encryption/security measures
"""

[pr_description]
enable_pr_description = true
publish_description_as_comment = false
add_original_user_description = true
keep_original_user_title = true
extra_instructions = """
Include in PR description:
1. FCRA compliance impact assessment
2. Credit repair functionality changes
3. Security implications
4. Test coverage changes
5. Performance impact
6. Database migration requirements (if any)

STANDARDIZED FORMAT REQUIREMENTS:
- Use clear section headers with emojis
- Include impact assessment for each change type
- Document security considerations
- Specify testing requirements
- Note any breaking changes or migrations needed
- Link to related issues or documentation
"""

[pr_questions]
enable_pr_questions = true
extra_instructions = """
Ask questions about:
1. FCRA compliance validation approach
2. Credit calculation accuracy verification
3. PII data handling security measures
4. Test coverage for edge cases
5. Error handling for credit workflows
6. Performance impact on credit operations
"""

[pr_add_docs]
enable_pr_add_docs = true
docs_style = "google"
extra_instructions = """
Focus documentation on:
1. FCRA compliance requirements
2. Credit calculation methodologies
3. API usage patterns for credit data
4. Security considerations
5. Error handling approaches
6. Testing strategies
"""

[pr_update_changelog]
enable_pr_update_changelog = true
changelog_file = "CHANGELOG.md"
extra_instructions = """
Categorize changes as:
- FCRA Compliance
- Credit Calculations
- Security Enhancements
- Performance Improvements
- Bug Fixes
- Testing Improvements
"""

[pr_analyze]
enable_pr_analyze = true
extra_instructions = """
Perform deep architectural and logic analysis:

CODE LOGIC ANALYSIS:
1. Algorithm complexity and computational efficiency
2. Data flow patterns and state transitions
3. Business rule implementation accuracy
4. Error propagation and exception handling
5. Concurrency and thread safety considerations
6. Memory management and resource utilization

ARCHITECTURAL ANALYSIS:
1. Design pattern usage and appropriateness
2. Dependency injection and coupling analysis
3. Interface design and abstraction layers
4. Data persistence and caching strategies
5. API design and contract compliance
6. Microservice communication patterns

DOMAIN-SPECIFIC ANALYSIS:
1. FCRA compliance risks and legal requirements
2. Credit calculation accuracy and formula validation
3. Security vulnerabilities in credit data handling
4. Performance bottlenecks in credit report generation
5. Test coverage gaps in business-critical workflows
6. Code maintainability for regulatory compliance

TECHNICAL DEBT ASSESSMENT:
1. Code duplication and refactoring opportunities
2. Legacy code integration and modernization needs
3. Documentation completeness and accuracy
4. Configuration management and environment handling
5. Monitoring and observability implementation
6. Scalability considerations and capacity planning
"""

[pr_reviewer.logic_analysis]
enable_deep_logic_analysis = true
analyze_code_flow = true
review_business_logic = true
assess_algorithmic_complexity = true
validate_data_integrity = true
examine_error_handling_patterns = true
review_performance_implications = true

[pr_similar_issue]
enable_pr_similar_issue = true

[pr_help]
enable_pr_help = true

[pr_config]
enable_pr_config = true

[local]
# Local development settings
description_path = ""
review_path = ""

[litellm]
# Cost optimization settings
drop_params = true
max_tokens = 4000
temperature = 0.1
