[config]
model = "gpt-4o-mini"
model_turbo = "gpt-4o-mini"
fallback_models = ["claude-3-5-sonnet-20241022"]
git_provider = "github"
publish_output = true
publish_output_progress = true
verbosity_level = 2
use_repo_settings_file = true
enable_help_text = true

[github]
# GitHub configuration
user_token = ""  # Set via environment variable GITHUB_TOKEN
deployment_type = "user"
ratelimit_retries = 5
base_url = "https://api.github.com"

[pr_reviewer]
# Comprehensive AI-powered code review with repository-wide analysis
require_focused_review = true
require_score_review = true
require_tests_review = true
require_estimate_effort_to_review = true
require_security_review = true
enable_review_labels_effort = true
enable_review_labels_security = true
maximal_review_effort = 5
extra_instructions = """
REPOSITORY CONTEXT ANALYSIS:
This is a multi-stack development automation framework. Analyze changes in context of:

1. REPOSITORY STRUCTURE AWARENESS:
   - Multi-stack architecture (Laravel + React hybrid support)
   - Automation scripts in scripts-complex/ directory
   - CI/CD pipeline configuration in .github/workflows/
   - Documentation structure in docs/ directory
   - Testing infrastructure across multiple languages

2. ARCHITECTURE IMPACT ASSESSMENT:
   - How changes affect overall system design and patterns
   - Integration points between different technology stacks
   - Compatibility with existing automation and quality gates
   - Impact on multi-stack project detection logic
   - Effect on CI/CD pipeline and quality monitoring

3. CODE QUALITY & STANDARDS:
   - Consistency with established coding patterns
   - Adherence to language-specific best practices
   - Integration with existing linting and formatting tools
   - Compatibility with quality gates (ESLint, PHPStan, etc.)
   - Test coverage and testing strategy alignment

4. SECURITY & COMPLIANCE:
   - General security best practices (not domain-specific)
   - Input validation and sanitization
   - Authentication and authorization patterns
   - Error handling and information disclosure prevention
   - Dependency security and vulnerability assessment

5. PERFORMANCE & SCALABILITY:
   - Code efficiency and optimization opportunities
   - Database query optimization and indexing
   - API performance and caching strategies
   - Frontend performance and bundle optimization
   - Memory usage and resource management

6. TESTING & VALIDATION:
   - Test coverage adequacy and quality
   - Testing strategy consistency across stacks
   - Integration test completeness
   - E2E test coverage for critical workflows
   - Mock and fixture quality and maintainability

DOMAIN-SPECIFIC CONSIDERATIONS (when applicable):
- For financial/credit applications: FCRA compliance, PII protection, audit trails
- For healthcare applications: HIPAA compliance, PHI protection
- For e-commerce: PCI compliance, payment security
- For general applications: GDPR compliance, data protection
"""

[pr_reviewer.incremental]
enable_incremental_review = true
require_all_thresholds = false

[pr_code_suggestions]
enable_code_suggestions = true
commitable_code_suggestions = true
extra_instructions = """
COMPREHENSIVE IMPROVEMENT SUGGESTIONS:

1. CODE QUALITY IMPROVEMENTS:
   - Refactoring opportunities for better maintainability
   - Performance optimizations and efficiency gains
   - Design pattern improvements and architectural enhancements
   - Code duplication elimination and DRY principle application
   - Error handling and edge case coverage improvements

2. SECURITY ENHANCEMENTS:
   - Input validation and sanitization improvements
   - Authentication and authorization strengthening
   - Dependency security updates and vulnerability fixes
   - Information disclosure prevention
   - Secure coding practice implementation

3. TESTING IMPROVEMENTS:
   - Missing test coverage identification
   - Test quality and effectiveness enhancements
   - Integration and E2E test suggestions
   - Mock and fixture improvements
   - Testing strategy optimization

4. PERFORMANCE OPTIMIZATIONS:
   - Database query optimization
   - API response time improvements
   - Frontend bundle size reduction
   - Memory usage optimization
   - Caching strategy implementation

5. DOCUMENTATION ENHANCEMENTS:
   - Code documentation and commenting improvements
   - API documentation completeness
   - README and setup instruction clarity
   - Architecture decision documentation
   - Troubleshooting guide improvements

AVOID SUGGESTING:
- Breaking changes to existing APIs without migration strategy
- Modifications that could impact production stability
- Changes that break existing automation or CI/CD pipeline
- Alterations to security measures without proper justification
"""

[pr_description]
enable_pr_description = true
publish_description_as_comment = false
add_original_user_description = true
keep_original_user_title = true
extra_instructions = """
COMPREHENSIVE PR DESCRIPTION GENERATION:

Include comprehensive analysis covering:

1. CHANGE SUMMARY:
   - Clear overview of what was changed and why
   - Impact on different parts of the system
   - Breaking changes and migration requirements
   - Dependencies and related changes

2. TECHNICAL IMPACT:
   - Architecture and design pattern changes
   - Performance implications and optimizations
   - Security considerations and improvements
   - Database schema changes and migrations
   - API changes and backward compatibility

3. TESTING & VALIDATION:
   - Test coverage changes and improvements
   - New test scenarios and edge cases covered
   - Integration and E2E test updates
   - Quality gate compliance and validation
   - Manual testing requirements

4. DEPLOYMENT CONSIDERATIONS:
   - Environment-specific configuration changes
   - Deployment sequence and dependencies
   - Rollback procedures and risk mitigation
   - Monitoring and alerting updates
   - Documentation updates required

5. QUALITY METRICS:
   - Code quality improvements and metrics
   - Performance benchmarks and comparisons
   - Security scan results and improvements
   - Test coverage statistics and trends
   - Technical debt reduction achievements

6. STAKEHOLDER IMPACT:
   - User experience improvements
   - Developer experience enhancements
   - Operations and maintenance considerations
   - Business value and feature delivery
   - Risk assessment and mitigation
"""

[pr_questions]
enable_pr_questions = true
extra_instructions = """
INTELLIGENT QUESTIONING STRATEGY:

Ask relevant questions about:

1. IMPLEMENTATION APPROACH:
   - Alternative implementation strategies considered
   - Trade-offs and decision rationale
   - Scalability and future-proofing considerations
   - Integration with existing systems and patterns

2. TESTING & VALIDATION:
   - Test coverage adequacy for edge cases
   - Integration testing strategy and completeness
   - Performance testing and benchmarking approach
   - Security testing and vulnerability assessment

3. ARCHITECTURE & DESIGN:
   - Design pattern consistency and appropriateness
   - Separation of concerns and modularity
   - Dependency management and coupling
   - Extensibility and maintainability considerations

4. SECURITY & COMPLIANCE:
   - Security review and threat modeling
   - Compliance requirements and validation
   - Data protection and privacy considerations
   - Access control and authorization strategy

5. PERFORMANCE & SCALABILITY:
   - Performance impact assessment and optimization
   - Scalability considerations and bottleneck identification
   - Resource usage and efficiency improvements
   - Caching and optimization strategies

6. OPERATIONAL CONSIDERATIONS:
   - Monitoring and alerting requirements
   - Deployment and rollback procedures
   - Documentation and knowledge transfer needs
   - Maintenance and support considerations
"""

[pr_add_docs]
enable_pr_add_docs = true
docs_style = "google"
extra_instructions = """
COMPREHENSIVE DOCUMENTATION GENERATION:

Focus on creating documentation that covers:

1. TECHNICAL DOCUMENTATION:
   - API documentation with examples and usage patterns
   - Architecture decisions and design rationale
   - Configuration options and environment setup
   - Integration guides and best practices
   - Troubleshooting and debugging information

2. DEVELOPER GUIDES:
   - Setup and installation instructions
   - Development workflow and contribution guidelines
   - Testing strategies and quality standards
   - Code review and approval processes
   - Deployment and release procedures

3. OPERATIONAL DOCUMENTATION:
   - Monitoring and alerting configuration
   - Performance tuning and optimization guides
   - Security considerations and compliance requirements
   - Backup and disaster recovery procedures
   - Maintenance and support workflows

4. USER DOCUMENTATION:
   - Feature descriptions and usage examples
   - Configuration and customization options
   - Best practices and recommended workflows
   - FAQ and common issues resolution
   - Migration guides and upgrade procedures
"""

[pr_update_changelog]
enable_pr_update_changelog = true
changelog_file = "CHANGELOG.md"
extra_instructions = """
STRUCTURED CHANGELOG UPDATES:

Categorize changes comprehensively:

- **Features**: New functionality and capabilities
- **Enhancements**: Improvements to existing features
- **Bug Fixes**: Issue resolutions and corrections
- **Security**: Security improvements and vulnerability fixes
- **Performance**: Optimization and efficiency improvements
- **Testing**: Test coverage and quality improvements
- **Documentation**: Documentation updates and improvements
- **Infrastructure**: CI/CD, deployment, and tooling changes
- **Dependencies**: Library and framework updates
- **Breaking Changes**: API changes requiring migration
- **Deprecations**: Features marked for future removal
- **Compliance**: Regulatory and standards compliance updates
"""

[pr_analyze]
enable_pr_analyze = true
extra_instructions = """
COMPREHENSIVE REPOSITORY ANALYSIS:

Perform thorough analysis covering:

1. ARCHITECTURE & DESIGN:
   - Overall system architecture and design patterns
   - Code organization and modularity assessment
   - Separation of concerns and coupling analysis
   - Design principle adherence (SOLID, DRY, KISS)
   - Architectural debt and improvement opportunities

2. CODE QUALITY ASSESSMENT:
   - Code complexity and maintainability metrics
   - Coding standards and convention adherence
   - Code duplication and refactoring opportunities
   - Error handling and edge case coverage
   - Documentation quality and completeness

3. SECURITY ANALYSIS:
   - Security vulnerability identification
   - Authentication and authorization review
   - Input validation and sanitization assessment
   - Dependency security and update requirements
   - Information disclosure and privacy protection

4. PERFORMANCE EVALUATION:
   - Performance bottleneck identification
   - Database query optimization opportunities
   - API response time and efficiency analysis
   - Frontend performance and optimization potential
   - Resource usage and memory management

5. TESTING STRATEGY REVIEW:
   - Test coverage analysis and gap identification
   - Testing strategy effectiveness and completeness
   - Integration and E2E test adequacy
   - Test maintainability and reliability assessment
   - Quality gate compliance and validation

6. OPERATIONAL READINESS:
   - Deployment and rollback procedure adequacy
   - Monitoring and alerting coverage
   - Documentation completeness and accuracy
   - Configuration management and environment setup
   - Maintenance and support considerations

7. REPOSITORY-WIDE IMPACT:
   - Cross-component dependency analysis
   - Integration point validation and testing
   - Configuration file consistency and management
   - CI/CD pipeline impact and optimization
   - Development workflow and tooling effectiveness
"""

[pr_similar_issue]
enable_pr_similar_issue = true
skip_comments = false

[pr_help]
enable_pr_help = true

[pr_config]
enable_pr_config = true

[local]
# Local development settings
description_path = ""
review_path = ""

[litellm]
# Cost optimization settings
drop_params = true
max_tokens = 8000
temperature = 0.1
