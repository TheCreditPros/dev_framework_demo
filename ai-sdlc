#!/bin/bash
# AI-SDLC Enhanced CLI - v3.3.0
# Simplified management interface for development automation

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Version
VERSION="3.3.0"

# Logging functions
info() { echo -e "${BLUE}ℹ️  $1${NC}"; }
success() { echo -e "${GREEN}✅ $1${NC}"; }
warn() { echo -e "${YELLOW}⚠️  $1${NC}"; }
error() { echo -e "${RED}❌ $1${NC}"; }

# Show help
show_help() {
    echo -e "${BLUE}"
    echo "╔══════════════════════════════════════════════╗"
    echo "║           AI-SDLC Enhanced CLI v$VERSION         ║"
    echo "╚══════════════════════════════════════════════╝"
    echo -e "${NC}"
    echo
    echo "Usage: ai-sdlc <command>"
    echo
    echo "Commands:"
    echo "  setup                    Set up AI-SDLC in current project (one-time)"
    echo "  status                   Show current setup status"
    echo "  validate                 Run validation checks"
    echo "  explain <error>          Get detailed explanation for any error or issue"
    echo "  test-init                Initialize AI test generation"
    echo "  test-gen                 Generate tests for files (usage: test-gen <file|all>)"
    echo "  help                     Show this help message"
    echo
    echo "Examples:"
    echo "  ai-sdlc setup                                    # Initial setup"
    echo "  ai-sdlc status                                   # Check if working"
    echo "  ai-sdlc validate                                 # Run quality checks"
    echo "  ai-sdlc explain \"ESLint parsing error\"           # Get detailed help"
    echo "  ai-sdlc explain \"pre-commit hook failed\"         # Understand hook issues"
    echo "  ai-sdlc test-init                                # Setup test generation"
    echo "  ai-sdlc test-gen all                             # Generate tests for all files"
    echo
    echo "Documentation: https://nydamon.github.io/ai-sdlc-docs/"
}

# Setup command
cmd_setup() {
    info "Running AI-SDLC setup..."

    if [[ -f "./auto-setup.sh" ]]; then
        ./auto-setup.sh "$@"
    else
        error "auto-setup.sh not found in current directory"
        info "Please ensure you're in the AI-SDLC framework directory"
        exit 1
    fi
}

# Status command
cmd_status() {
    info "Checking AI-SDLC status..."

    local status_checks=0
    local status_passed=0

    echo -e "\n${BLUE}📊 Setup Status${NC}"

    # Check package.json
    if [[ -f "package.json" ]]; then
        success "package.json found"
        status_passed=$((status_passed + 1))
    else
        error "package.json missing"
    fi
    status_checks=$((status_checks + 1))

    # Check git hooks
    if [[ -f ".husky/pre-commit" ]]; then
        success "Git hooks configured"
        status_passed=$((status_passed + 1))
    else
        error "Git hooks not configured"
    fi
    status_checks=$((status_checks + 1))

    # Check ESLint (support both legacy and modern formats)
    if [[ -f ".eslintrc.js" ]] || [[ -f ".eslintrc.json" ]] || [[ -f "eslint.config.js" ]] || [[ -f "eslint.config.mjs" ]]; then
        success "ESLint configured"
        status_passed=$((status_passed + 1))
    else
        error "ESLint not configured"
    fi
    status_checks=$((status_checks + 1))

    # Check Prettier
    if [[ -f ".prettierrc" ]] || [[ -f ".prettierrc.json" ]]; then
        success "Prettier configured"
        status_passed=$((status_passed + 1))
    else
        error "Prettier not configured"
    fi
    status_checks=$((status_checks + 1))

    local success_rate=$((status_passed * 100 / status_checks))
    echo -e "\n${BLUE}Status: $success_rate% ($status_passed/$status_checks checks passed)${NC}"

    if [[ $success_rate -eq 100 ]]; then
        success "🎉 AI-SDLC is working perfectly!"
    elif [[ $success_rate -ge 75 ]]; then
        warn "Setup mostly working. Run 'ai-sdlc setup' to fix issues."
    else
        error "Setup incomplete. Run 'ai-sdlc setup' to get started."
    fi
}

# NEW: Explain command for detailed error guidance
cmd_explain() {
    local query="$1"
    if [[ -z "$query" ]]; then
        error "Usage: ai-sdlc explain \"your error or issue\""
        echo
        echo "Examples:"
        echo "  ai-sdlc explain \"ESLint parsing error\""
        echo "  ai-sdlc explain \"pre-commit hook failed\""
        echo "  ai-sdlc explain \"Husky not working\""
        echo "  ai-sdlc explain \"package.json missing\""
        exit 1
    fi

    info "🔍 Analyzing: $query"
    echo

    # Common error explanations with solutions
    case "$query" in
        *"ESLint"*|*"eslint"*|*"parsing"*)
            echo -e "${YELLOW}📋 ESLint Issues Explanation:${NC}"
            echo
            echo "Common ESLint problems and solutions:"
            echo
            echo "1. ${BLUE}Parsing Error:${NC}"
            echo "   - Cause: Using legacy .eslintrc.js with modern ESLint v9+"
            echo "   - Solution: Update to eslint.config.js flat config format"
            echo "   - Fix: Run './ai-sdlc setup' to auto-generate modern config"
            echo
            echo "2. ${BLUE}Module Resolution Error:${NC}"
            echo "   - Cause: Missing TypeScript ESLint plugins"
            echo "   - Solution: Install @typescript-eslint/parser and @typescript-eslint/eslint-plugin"
            echo "   - Fix: Run 'npm install --save-dev @typescript-eslint/parser @typescript-eslint/eslint-plugin'"
            echo
            echo "3. ${BLUE}Configuration Not Found:${NC}"
            echo "   - Cause: No ESLint config file exists"
            echo "   - Solution: Create eslint.config.js"
            echo "   - Fix: Run './ai-sdlc setup' to auto-generate"
            ;;
        *"pre-commit"*|*"hook"*|*"husky"*)
            echo -e "${YELLOW}🪝 Git Hooks Issues Explanation:${NC}"
            echo
            echo "Common Git hooks problems and solutions:"
            echo
            echo "1. ${BLUE}Pre-commit Hook Not Running:${NC}"
            echo "   - Cause: Hook file not executable or missing"
            echo "   - Solution: Fix permissions and recreate hook"
            echo "   - Fix: Run 'chmod +x .husky/pre-commit' or './ai-sdlc setup'"
            echo
            echo "2. ${BLUE}Husky Not Initialized:${NC}"
            echo "   - Cause: Husky not properly set up"
            echo "   - Solution: Initialize Husky with modern v9+ format"
            echo "   - Fix: Run 'npx husky init' then './ai-sdlc setup'"
            echo
            echo "3. ${BLUE}lint-staged Not Configured:${NC}"
            echo "   - Cause: Missing lint-staged configuration in package.json"
            echo "   - Solution: Add lint-staged config"
            echo "   - Fix: Run './ai-sdlc setup' to auto-configure"
            ;;
        *"package"*|*"npm"*|*"dependencies"*)
            echo -e "${YELLOW}📦 Package Management Issues Explanation:${NC}"
            echo
            echo "Common package problems and solutions:"
            echo
            echo "1. ${BLUE}package.json Missing:${NC}"
            echo "   - Cause: Not in a Node.js project or file deleted"
            echo "   - Solution: Initialize npm project"
            echo "   - Fix: Run 'npm init -y' then './ai-sdlc setup'"
            echo
            echo "2. ${BLUE}Dependency Conflicts:${NC}"
            echo "   - Cause: Version conflicts or corrupted node_modules"
            echo "   - Solution: Clean install dependencies"
            echo "   - Fix: Run 'rm -rf node_modules package-lock.json && npm install'"
            echo
            echo "3. ${BLUE}Missing Dependencies:${NC}"
            echo "   - Cause: Required packages not installed"
            echo "   - Solution: Install missing packages"
            echo "   - Fix: Run './ai-sdlc setup' to install all required dependencies"
            ;;
        *"test"*|*"vitest"*|*"playwright"*)
            echo -e "${YELLOW}🧪 Testing Issues Explanation:${NC}"
            echo
            echo "Common testing problems and solutions:"
            echo
            echo "1. ${BLUE}Tests Not Running:${NC}"
            echo "   - Cause: Missing test framework or configuration"
            echo "   - Solution: Install and configure Vitest"
            echo "   - Fix: Run './ai-sdlc setup' to auto-configure testing"
            echo
            echo "2. ${BLUE}Playwright Issues:${NC}"
            echo "   - Cause: Browsers not installed or config missing"
            echo "   - Solution: Install Playwright browsers"
            echo "   - Fix: Run 'npx playwright install'"
            echo
            echo "3. ${BLUE}Coverage Thresholds:${NC}"
            echo "   - Cause: Code coverage below 80% threshold"
            echo "   - Solution: Write more tests or adjust thresholds"
            echo "   - Fix: Check vitest.config.js coverage settings"
            ;;
        *"git"*|*"branch"*|*"commit"*)
            echo -e "${YELLOW}🌿 Git Workflow Issues Explanation:${NC}"
            echo
            echo "Common Git problems and solutions:"
            echo
            echo "1. ${BLUE}Branch Naming Rejected:${NC}"
            echo "   - Cause: Branch name doesn't follow convention"
            echo "   - Solution: Use conventional branch naming"
            echo "   - Fix: Use format 'feature/description' or 'fix/bug-name'"
            echo
            echo "2. ${BLUE}Commit Message Rejected:${NC}"
            echo "   - Cause: Doesn't follow conventional commit format"
            echo "   - Solution: Use conventional commit messages"
            echo "   - Fix: Use format 'feat: description' or 'fix: description'"
            echo
            echo "3. ${BLUE}Git Repository Not Found:${NC}"
            echo "   - Cause: Not in a Git repository"
            echo "   - Solution: Initialize Git repository"
            echo "   - Fix: Run 'git init' then './ai-sdlc setup'"
            ;;
        *)
            echo -e "${YELLOW}🔍 General Troubleshooting:${NC}"
            echo
            echo "For issue: \"$query\""
            echo
            echo "Common troubleshooting steps:"
            echo
            echo "1. ${BLUE}Run Validation:${NC}"
            echo "   ./ai-sdlc validate"
            echo
            echo "2. ${BLUE}Check Status:${NC}"
            echo "   ./ai-sdlc status"
            echo
            echo "3. ${BLUE}Re-run Setup:${NC}"
            echo "   ./ai-sdlc setup"
            echo
            echo "4. ${BLUE}Check Documentation:${NC}"
            echo "   https://nydamon.github.io/ai-sdlc-docs/troubleshooting-simple/"
            echo
            echo "5. ${BLUE}Verify Prerequisites:${NC}"
            echo "   - Node.js 18+ installed"
            echo "   - npm 8+ installed"
            echo "   - Git installed and configured"
            echo "   - In a Git repository (run 'git init' if needed)"
            ;;
    esac

    echo
    echo -e "${GREEN}💡 Need more help?${NC}"
    echo "- Documentation: https://nydamon.github.io/ai-sdlc-docs/"
    echo "- Troubleshooting: https://nydamon.github.io/ai-sdlc-docs/troubleshooting-simple/"
    echo "- Run './ai-sdlc validate' for detailed diagnostics"
}

# Validate command
cmd_validate() {
    info "Running validation checks..."

    local issues=0

    echo -e "\n${BLUE}🔍 Validation Results${NC}"

    # Check if git hooks work
    if [[ -f ".husky/pre-commit" ]] && [[ -x ".husky/pre-commit" ]]; then
        success "Pre-commit hook is executable"
    else
        error "Pre-commit hook issues detected"
        echo "  💡 Fix: Run 'chmod +x .husky/pre-commit' or './ai-sdlc setup'"
        ((issues++))
    fi

    # Check npm scripts
    if npm run lint --silent >/dev/null 2>&1; then
        success "ESLint is working"
    else
        warn "ESLint has issues (this is normal for new projects)"
        echo "  💡 Fix: Run './ai-sdlc explain ESLint' for detailed help"
    fi

    if command -v npx >/dev/null 2>&1; then
        success "npx is available"
    else
        error "npx not available"
        echo "  💡 Fix: Update Node.js to version 18+ or reinstall npm"
        ((issues++))
    fi

    # Test git repository
    if git status >/dev/null 2>&1; then
        success "Git repository is healthy"
    else
        error "Git repository issues"
        echo "  💡 Fix: Run 'git init' to initialize repository"
        ((issues++))
    fi

    # Check for SonarCloud integration
    if [[ -n "$SONAR_TOKEN" ]]; then
        success "SonarCloud token configured"
    else
        info "SonarCloud token not set (optional)"
        echo "  💡 Add SONAR_TOKEN to .env for quality gate integration"
    fi

    # Check for GitGuardian
    if command -v ggshield >/dev/null 2>&1; then
        success "GitGuardian CLI available"
    else
        info "GitGuardian not installed (optional)"
        echo "  💡 Install: pip install detect-secrets-guardian"
    fi

    echo -e "\n${BLUE}📋 Summary${NC}"
    if [[ $issues -eq 0 ]]; then
        success "All validation checks passed! ✨"
        info "Your development environment is ready."
        echo
        echo -e "${GREEN}🚀 Next Steps:${NC}"
        echo "- Start developing with automatic quality checks"
        echo "- Run 'npm run test' to verify testing setup"
        echo "- Run 'git commit' to test hooks (use conventional format)"
    else
        error "$issues validation issues found."
        info "Run './ai-sdlc explain <issue>' for detailed help on specific problems."
        echo
        echo -e "${YELLOW}🔧 Quick Fixes:${NC}"
        echo "- Run './ai-sdlc setup' to fix most configuration issues"
        echo "- Run './ai-sdlc explain \"your specific error\"' for targeted help"
    fi
}

# Test initialization command
cmd_test_init() {
    info "Initializing AI test generation..."

    if [[ -f "./scripts-complex/ai-test-generator.js" ]]; then
        node ./scripts-complex/ai-test-generator.js init "$@"
    elif [[ -f "./scripts/ai-test-generator.js" ]]; then
        node ./scripts/ai-test-generator.js init "$@"
    else
        error "AI test generator not found"
        info "Make sure you have the scripts-complex directory or run from the AI-SDLC framework directory"
        echo
        echo -e "${YELLOW}💡 Troubleshooting:${NC}"
        echo "- Ensure you're in the correct directory"
        echo "- Run './ai-sdlc setup' to install missing components"
        echo "- Check if OpenAI API key is configured in .env"
        exit 1
    fi
}

# Test generation command
cmd_test_gen() {
    info "Generating tests..."

    if [[ -f "./scripts-complex/ai-test-generator.js" ]]; then
        node ./scripts-complex/ai-test-generator.js generate "$@"
    elif [[ -f "./scripts/ai-test-generator.js" ]]; then
        node ./scripts/ai-test-generator.js generate "$@"
    else
        error "AI test generator not found"
        info "Make sure you have the scripts-complex directory or run from the AI-SDLC framework directory"
        echo
        echo -e "${YELLOW}💡 Troubleshooting:${NC}"
        echo "- Run './ai-sdlc explain \"test generation\"' for detailed help"
        echo "- Ensure OpenAI API key is configured"
        echo "- Verify you're in the correct project directory"
        exit 1
    fi
}

# Main command router
main() {
    case "${1:-help}" in
        "setup")
            shift
            cmd_setup "$@"
            ;;
        "status")
            shift
            cmd_status "$@"
            ;;
        "validate")
            shift
            cmd_validate "$@"
            ;;
        "explain")
            shift
            cmd_explain "$@"
            ;;
        "test-init")
            shift
            cmd_test_init "$@"
            ;;
        "test-gen")
            shift
            cmd_test_gen "$@"
            ;;
        "help"|"--help"|"-h"|"")
            show_help
            ;;
        *)
            error "Unknown command: $1"
            echo "Run 'ai-sdlc help' for available commands"
            echo "Run 'ai-sdlc explain \"$1\"' for help with this specific issue"
            exit 1
            ;;
    esac
}

main "$@"
