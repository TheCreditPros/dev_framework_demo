name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: AI review changed files and comment
        uses: actions/github-script@v7
        env:
          OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
        with:
          script: |
            const pr = context.payload.pull_request;
            if (!pr) {
              core.info('No PR context; skipping.');
              return;
            }

            // Debug logging
            core.info(`PR context exists: ${!!pr}`);
            core.info(`OPENAI_KEY available: ${!!process.env.OPENAI_KEY}`);
            core.info(`OPENAI_KEY length: ${process.env.OPENAI_KEY ? process.env.OPENAI_KEY.length : 0}`);

            if (!process.env.OPENAI_KEY) {
              core.info('OPENAI_KEY not set; skipping AI review.');
              return;
            }

            // 1) Gather changed files + patches
            const files = await github.paginate(
              github.rest.pulls.listFiles,
              { owner: context.repo.owner, repo: context.repo.repo, pull_number: pr.number, per_page: 100 }
            );

            // Keep only code-ish files and include the unified diff patch (may be undefined for binaries)
            const patches = files
              .filter(f => f.patch && /\.(js|ts|tsx|py|rb|go|rs|java|kt|cs|php|swift|cpp|c|sh|yaml|yml|json)$/i.test(f.filename))
              .map(f => `# ${f.filename}\n${f.patch}`)
              .join("\n\n");

            if (!patches) {
              core.info('No textual changes to review.');
              return;
            }

            // 2) Build prompt (trim to ~40k chars to avoid token blowups)
            const maxChars = 40000;
            const diffChunk = patches.length > maxChars ? patches.slice(0, maxChars) + "\n\n[...diff truncated...]" : patches;

            const system = "You are a senior staff engineer doing code review. Be specific. Point to exact lines/hunks. Focus on security, correctness, performance, race conditions, resource leaks, error handling, and readability. When confident, suggest concrete diffs/patches. Use markdown with short sections and bullet points. Keep it under ~400 words.";

            const user = `Repository: ${context.repo.owner}/${context.repo.repo}
            PR #${pr.number}: ${pr.title}
            
            Here are the unified diffs for the changed files:
            ${diffChunk}`;
            // 3) Call OpenAI API with retry/backoff; non-blocking on failure
            const endpoint = 'https://api.openai.com/v1/chat/completions';
            const payload = {
              model: 'gpt-4o-mini',
              messages: [
                { role: 'system', content: system },
                { role: 'user', content: user }
              ],
              max_tokens: 1000,
              temperature: 0.1
            };

            const sleep = (ms) => new Promise((r) => setTimeout(r, ms));
            const shouldRetry = (status) => [429, 500, 502, 503, 504].includes(status);

            let resp, text, data;
            const maxAttempts = 3;
            for (let attempt = 1; attempt <= maxAttempts; attempt++) {
              try {
                const controller = new AbortController();
                const t = setTimeout(() => controller.abort(), 15000);
                resp = await fetch(endpoint, {
                  method: 'POST',
                  headers: {
                    'Authorization': `Bearer ${process.env.OPENAI_KEY}`,
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(payload),
                  signal: controller.signal
                });
                clearTimeout(t);
                core.info(`OpenAI API status (attempt ${attempt}): ${resp.status}`);
                if (resp.ok) {
                  data = await resp.json();
                  break;
                }
                if (!shouldRetry(resp.status)) {
                  text = await resp.text();
                  core.warning(`OpenAI API non-retryable error: ${resp.status} ${text}`);
                  break;
                }
              } catch (err) {
                core.warning(`OpenAI request error on attempt ${attempt}: ${err.message || err}`);
              }
              if (attempt < maxAttempts) await sleep(1000 * Math.pow(2, attempt - 1));
            }

            if (!data) {
              core.warning('Skipping AI review (OpenAI API unavailable after retries).');
              return;
            }

            const reviewText = data.choices?.[0]?.message?.content?.trim() || '';

            core.info(`Review text length: ${reviewText.length}`);

            if (!reviewText) {
              core.info('Model returned no content.');
              return;
            }

            // 4) Post a single PR comment with the review
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: `## ðŸ¤– AI Code Review (gpt-4o-mini)\n${reviewText}\n\nâ€” _automated review_`
            });
