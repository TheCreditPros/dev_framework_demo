name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: AI review changed files and comment
        uses: actions/github-script@v7
        env:
          OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
        with:
          script: |
            const pr = context.payload.pull_request;
            if (!pr) {
              core.info('No PR context; skipping.');
              return;
            }

            if (!process.env.OPENAI_KEY) {
              core.info('OPENAI_KEY not set; skipping AI review.');
              return;
            }

            // 1) Gather changed files + patches
            const files = await github.paginate(
              github.rest.pulls.listFiles,
              { owner: context.repo.owner, repo: context.repo.repo, pull_number: pr.number, per_page: 100 }
            );

            // Keep only code-ish files and include the unified diff patch (may be undefined for binaries)
            const patches = files
              .filter(f => f.patch && /\.(js|ts|tsx|py|rb|go|rs|java|kt|cs|php|swift|cpp|c|sh|yaml|yml|json)$/i.test(f.filename))
              .map(f => `# ${f.filename}\n${f.patch}`)
              .join("\n\n");

            if (!patches) {
              core.info('No textual changes to review.');
              return;
            }

            // 2) Build prompt (trim to ~40k chars to avoid token blowups)
            const maxChars = 40000;
            const diffChunk = patches.length > maxChars ? patches.slice(0, maxChars) + "\n\n[...diff truncated...]" : patches;

            const system = `
You are a senior staff engineer doing code review.
Be specific. Point to exact lines/hunks.
Focus on security, correctness, performance, race conditions, resource leaks, error handling, and readability.
When confident, suggest concrete diffs/patches.
Use markdown with short sections and bullet points. Keep it under ~400 words.`;

            const user = `
Repository: ${context.repo.owner}/${context.repo.repo}
PR #${pr.number}: ${pr.title}

Here are the unified diffs for the changed files:
${diffChunk}
`;

            // 3) Call OpenAI Responses API (GPT-4.1-mini for speed/cost)
            const resp = await fetch('https://api.openai.com/v1/responses', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${process.env.OPENAI_KEY}`,
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                model: 'gpt-4.1-mini',
                input: [
                  { role: 'system', content: system },
                  { role: 'user', content: user }
                ]
              })
            });

            if (!resp.ok) {
              const text = await resp.text();
              core.setFailed(`OpenAI API error: ${resp.status} ${text}`);
              return;
            }

            const data = await resp.json();
            const reviewText = (data.output_text ?? (data.content || []).map(c => c.text).join('') ?? '').trim();

            if (!reviewText) {
              core.info('Model returned no content.');
              return;
            }

            // 4) Post a single PR comment with the review
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: `## ðŸ¤– AI Code Review (gpt-4.1-mini)\n${reviewText}\n\nâ€” _automated review_`
            });
