# AI-SDLC Framework v3.2.1 - Quality Gate Failure Notifications
# Actionable MS Teams notifications for developers when quality gates fail
# Generated by AI-SDLC Framework

name: üö® Quality Gate Failure Notifications

on:
  workflow_run:
    workflows: ["üöÄ Enhanced CI/CD Pipeline", "üîí Security Analysis", "‚ö° Performance Monitoring"]
    types: [completed]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, master, develop]

permissions:
  contents: read
  actions: read
  checks: read
  pull-requests: write

jobs:
  # ============================================================================
  # QUALITY GATE FAILURE ANALYSIS
  # ============================================================================
  analyze-failures:
    name: üîç Analyze Quality Gate Failures
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'failure' || github.event_name == 'pull_request'
    outputs:
      has-failures: ${{ steps.analysis.outputs.has-failures }}
      failure-summary: ${{ steps.analysis.outputs.failure-summary }}
      action-items: ${{ steps.analysis.outputs.action-items }}
      developer-guidance: ${{ steps.analysis.outputs.developer-guidance }}
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: üîç Analyze Quality Gate Failures
        id: analysis
        run: |
          echo "Analyzing quality gate failures..."

          # Initialize failure tracking
          HAS_FAILURES=false
          FAILURE_SUMMARY=""
          ACTION_ITEMS=""
          DEVELOPER_GUIDANCE=""

          # Check for test failures
          if [[ "${{ github.event.workflow_run.name }}" == *"CI/CD"* ]] && [[ "${{ github.event.workflow_run.conclusion }}" == "failure" ]]; then
            HAS_FAILURES=true
            FAILURE_SUMMARY="CI/CD Pipeline Failed"
            ACTION_ITEMS="1. Check test results\n2. Review code coverage\n3. Fix failing tests"
            DEVELOPER_GUIDANCE="Run 'npm run test:coverage' locally to identify issues"
          fi

          # Check for security failures
          if [[ "${{ github.event.workflow_run.name }}" == *"Security"* ]] && [[ "${{ github.event.workflow_run.conclusion }}" == "failure" ]]; then
            HAS_FAILURES=true
            FAILURE_SUMMARY="Security Scan Failed"
            ACTION_ITEMS="1. Review security vulnerabilities\n2. Update dependencies\n3. Fix secret exposure"
            DEVELOPER_GUIDANCE="Run './scripts-complex/security-scanner.js quick' locally"
          fi

          # Check for performance failures
          if [[ "${{ github.event.workflow_run.name }}" == *"Performance"* ]] && [[ "${{ github.event.workflow_run.conclusion }}" == "failure" ]]; then
            HAS_FAILURES=true
            FAILURE_SUMMARY="Performance Budget Exceeded"
            ACTION_ITEMS="1. Optimize Core Web Vitals\n2. Reduce bundle size\n3. Improve loading performance"
            DEVELOPER_GUIDANCE="Run 'npm run ci:performance' locally to test"
          fi

          # For PR events, check if quality gates would fail
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Checking PR for potential quality gate issues..."
            # This would be enhanced with actual quality checks
            HAS_FAILURES=false
          fi

          # Set outputs
          echo "has-failures=${HAS_FAILURES}" >> $GITHUB_OUTPUT
          echo "failure-summary=${FAILURE_SUMMARY}" >> $GITHUB_OUTPUT
          echo "action-items=${ACTION_ITEMS}" >> $GITHUB_OUTPUT
          echo "developer-guidance=${DEVELOPER_GUIDANCE}" >> $GITHUB_OUTPUT

  # ============================================================================
  # ENHANCED FAILURE NOTIFICATIONS
  # ============================================================================
  notify-failures:
    name: üö® Send Enhanced Failure Notifications
    runs-on: ubuntu-latest
    needs: analyze-failures
    if: needs.analyze-failures.outputs.has-failures == 'true'
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: üö® Send Actionable Failure Notification
        env:
          MS_TEAMS_WEBHOOK_URI: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          MS_TEAMS_DEV_WEBHOOK: ${{ secrets.MS_TEAMS_DEV_WEBHOOK }}
        run: |
          if [[ -n "$MS_TEAMS_WEBHOOK_URI" ]]; then
            # Enhanced failure notification with actionable guidance
            node scripts-complex/webhook-manager.js custom \
              "üö® Quality Gate Failure - Action Required" \
              "error" \
              '[
                {"name": "Repository", "value": "${{ github.repository }}"},
                {"name": "Failure Type", "value": "${{ needs.analyze-failures.outputs.failure-summary }}"},
                {"name": "Developer", "value": "${{ github.actor }}"},
                {"name": "Branch", "value": "${{ github.ref_name }}"},
                {"name": "Workflow", "value": "${{ github.event.workflow_run.name || github.workflow }}"},
                {"name": "Run ID", "value": "${{ github.run_id }}"},
                {"name": "Action Items", "value": "${{ needs.analyze-failures.outputs.action-items }}"},
                {"name": "Local Testing", "value": "${{ needs.analyze-failures.outputs.developer-guidance }}"},
                {"name": "Timestamp", "value": "'$(date -u +'%Y-%m-%d %H:%M:%S UTC')'"}
              ]'
          fi

      - name: üìß Send Developer-Specific Notification
        env:
          MS_TEAMS_DEV_WEBHOOK: ${{ secrets.MS_TEAMS_DEV_WEBHOOK }}
        run: |
          if [[ -n "$MS_TEAMS_DEV_WEBHOOK" ]]; then
            # Send detailed developer guidance to dev channel
            curl -H "Content-Type: application/json" -d '{
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "themeColor": "ff0000",
              "summary": "üö® Quality Gate Failure - Developer Action Required",
              "sections": [{
                "activityTitle": "üö® Quality Gate Failure - Immediate Action Required",
                "activitySubtitle": "Developer: ${{ github.actor }} | Repository: ${{ github.repository }}",
                "facts": [
                  {"name": "üîç Issue Type", "value": "${{ needs.analyze-failures.outputs.failure-summary }}"},
                  {"name": "üìã Action Items", "value": "${{ needs.analyze-failures.outputs.action-items }}"},
                  {"name": "üõ†Ô∏è Local Testing", "value": "${{ needs.analyze-failures.outputs.developer-guidance }}"},
                  {"name": "üåø Branch", "value": "${{ github.ref_name }}"},
                  {"name": "üìä Workflow", "value": "${{ github.event.workflow_run.name || github.workflow }}"},
                  {"name": "üîó Run Details", "value": "GitHub Actions Run #${{ github.run_id }}"}
                ],
                "text": "**Next Steps:**\n\n1. **Local Testing:** ${{ needs.analyze-failures.outputs.developer-guidance }}\n2. **Review Logs:** Check the GitHub Actions logs for detailed error information\n3. **Fix Issues:** Address the specific problems identified\n4. **Re-run Pipeline:** Push changes to trigger quality gates again\n\n**Need Help?** Use `./ai-sdlc explain` command for detailed troubleshooting guidance."
              }],
              "potentialAction": [{
                "@type": "OpenUri",
                "name": "üîç View Workflow Run",
                "targets": [{"os": "default", "uri": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}]
              }, {
                "@type": "OpenUri",
                "name": "üìã View Pull Request",
                "targets": [{"os": "default", "uri": "${{ github.event.pull_request.html_url || github.server_url }}/${{ github.repository }}"}]
              }]
            }' "$MS_TEAMS_DEV_WEBHOOK"
          fi

  # ============================================================================
  # QUALITY GATE SUCCESS NOTIFICATIONS
  # ============================================================================
  notify-success:
    name: ‚úÖ Send Success Notifications
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    steps:
      - name: ‚úÖ Send Success Notification
        env:
          MS_TEAMS_WEBHOOK_URI: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
        run: |
          if [[ -n "$MS_TEAMS_WEBHOOK_URI" ]]; then
            curl -H "Content-Type: application/json" -d '{
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "themeColor": "00ff00",
              "summary": "‚úÖ Quality Gates Passed",
              "sections": [{
                "activityTitle": "‚úÖ All Quality Gates Passed",
                "activitySubtitle": "Repository: ${{ github.repository }}",
                "facts": [
                  {"name": "Developer", "value": "${{ github.actor }}"},
                  {"name": "Branch", "value": "${{ github.ref_name }}"},
                  {"name": "Workflow", "value": "${{ github.event.workflow_run.name }}"},
                  {"name": "Status", "value": "All checks passed successfully"},
                  {"name": "Timestamp", "value": "'$(date -u +'%Y-%m-%d %H:%M:%S UTC')'"}
                ]
              }],
              "potentialAction": [{
                "@type": "OpenUri",
                "name": "üîç View Results",
                "targets": [{"os": "default", "uri": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}]
              }]
            }' "$MS_TEAMS_WEBHOOK_URI"
          fi

  # ============================================================================
  # COVERAGE THRESHOLD NOTIFICATIONS
  # ============================================================================
  check-coverage-threshold:
    name: üìä Check Coverage Thresholds
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: üß™ Run Tests with Coverage
        run: npm run test:coverage

      - name: üìä Check Coverage Thresholds
        run: |
          # Extract coverage percentage (this would be enhanced with actual coverage parsing)
          COVERAGE_PERCENT=85  # Placeholder - would parse from actual coverage report
          THRESHOLD=80

          if [[ $COVERAGE_PERCENT -lt $THRESHOLD ]]; then
            echo "coverage-failed=true" >> $GITHUB_ENV
            echo "coverage-percent=$COVERAGE_PERCENT" >> $GITHUB_ENV
            echo "coverage-threshold=$THRESHOLD" >> $GITHUB_ENV
          else
            echo "coverage-failed=false" >> $GITHUB_ENV
            echo "coverage-percent=$COVERAGE_PERCENT" >> $GITHUB_ENV
          fi

      - name: üö® Send Coverage Failure Notification
        if: env.coverage-failed == 'true'
        env:
          MS_TEAMS_DEV_WEBHOOK: ${{ secrets.MS_TEAMS_DEV_WEBHOOK }}
        run: |
          if [[ -n "$MS_TEAMS_DEV_WEBHOOK" ]]; then
            curl -H "Content-Type: application/json" -d '{
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "themeColor": "ff902a",
              "summary": "üìä Code Coverage Below Threshold",
              "sections": [{
                "activityTitle": "üìä Code Coverage Alert - Action Required",
                "activitySubtitle": "Developer: ${{ github.actor }} | PR: ${{ github.event.pull_request.number }}",
                "facts": [
                  {"name": "üéØ Current Coverage", "value": "${{ env.coverage-percent }}%"},
                  {"name": "üìè Required Threshold", "value": "${{ env.coverage-threshold }}%"},
                  {"name": "üìâ Gap", "value": "'$((${{ env.coverage-threshold }} - ${{ env.coverage-percent }}))'%"},
                  {"name": "üåø Branch", "value": "${{ github.head_ref }}"},
                  {"name": "üìã PR Title", "value": "${{ github.event.pull_request.title }}"}
                ],
                "text": "**Action Required:**\n\n1. **Add Tests:** Write tests for uncovered code paths\n2. **Local Check:** Run `npm run test:coverage` to see detailed coverage report\n3. **Target Areas:** Focus on business logic and edge cases\n4. **FCRA Compliance:** Ensure credit repair functions have 100% coverage\n\n**Quick Commands:**\n- `npm run test:coverage` - Generate coverage report\n- `npm run ai:generate-tests` - AI-powered test generation\n- `./ai-sdlc explain \"low test coverage\"` - Get specific guidance"
              }],
              "potentialAction": [{
                "@type": "OpenUri",
                "name": "üìã View Pull Request",
                "targets": [{"os": "default", "uri": "${{ github.event.pull_request.html_url }}"}]
              }, {
                "@type": "OpenUri",
                "name": "üîç View Coverage Report",
                "targets": [{"os": "default", "uri": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}]
              }]
            }' "$MS_TEAMS_DEV_WEBHOOK"
          fi
