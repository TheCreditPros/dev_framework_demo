# Qodo AI PR Review
# Comprehensive AI-powered code review for pull requests

name: 🤖 Qodo AI PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to review"
        required: false
        type: string
      command:
        description: "Qodo command to run"
        required: false
        default: "/review"
        type: choice
        options:
          - "/review"
          - "/describe"
          - "/improve"
          - "/ask"
          - "/update_changelog"
          - "/add_docs"
          - "/security_review"
          - "/performance_review"
          - "/test_review"
          - "/similar_prs"
          - "/help"

jobs:
  qodo-pr-review:
    name: 🤖 AI Code Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event.inputs.pr_number != ''

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "20"
          cache: "npm"

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔍 Run Tests
        run: npm run test:ci

      - name: 🤖 Qodo AI Review
        uses: qodo-ai/pr-agent@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_KEY: ${{ secrets.OPENAI_API_KEY }}
          PR_AGENT_CONFIG_PATH: ".pr_agent.toml"
          OPENAI_API_BASE: "https://api.openai.com/v1"
          PR_REVIEWER.EXTRA_INSTRUCTIONS: |
            CRITICAL REPOSITORY ANALYSIS REQUIREMENTS:

            REPOSITORY-WIDE CONTEXT ANALYSIS:
            - Analyze the entire repository structure and understand existing functionality
            - Review how proposed changes integrate with the established codebase
            - Identify potential conflicts with existing patterns and architecture
            - Consider the impact on all existing features and components
            - Understand the established coding standards and design principles

            BREAKAGE PREVENTION STANDARDS:
            - NEVER suggest changes that could break existing functionality
            - Ensure backward compatibility is maintained at all times
            - Verify API contracts and interfaces remain intact
            - Check for potential side effects on other components
            - Validate that existing tests continue to pass
            - Confirm no breaking changes to public APIs or interfaces

            Focus on:
            - Code quality and best practices
            - Security vulnerabilities
            - Performance optimizations
            - TypeScript best practices
            - Test coverage adequacy
            - Documentation completeness

            Provide specific, actionable feedback with code examples where possible.
            Be constructive and helpful for developers to improve their code.
        with:
          command: ${{ github.event.inputs.command || '/review' }}

      - name: 🤖 Qodo AI Describe
        uses: qodo-ai/pr-agent@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_KEY: ${{ secrets.OPENAI_API_KEY }}
          PR_AGENT_CONFIG_PATH: ".pr_agent.toml"
          OPENAI_API_BASE: "https://api.openai.com/v1"
        with:
          command: "/describe"

      - name: 🤖 Qodo AI Improve
        uses: qodo-ai/pr-agent@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_KEY: ${{ secrets.OPENAI_API_KEY }}
          PR_AGENT_CONFIG_PATH: ".pr_agent.toml"
          OPENAI_API_BASE: "https://api.openai.com/v1"
        with:
          command: "/improve"

      - name: 📝 Update Changelog
        uses: qodo-ai/pr-agent@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_KEY: ${{ secrets.OPENAI_API_KEY }}
          PR_AGENT_CONFIG_PATH: ".pr_agent.toml"
          OPENAI_API_BASE: "https://api.openai.com/v1"
        with:
          command: "/update_changelog"

      - name: 📊 Generate Coverage Report
        run: |
          if [ -f coverage/lcov.info ]; then
            echo "## 📊 Test Coverage Report" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            wc -l coverage/lcov.info >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

  qodo-security-review:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5

      - name: 🔍 Security Audit
        run: npm audit --audit-level=moderate

      - name: 🤖 Qodo Security Review
        uses: qodo-ai/pr-agent@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_KEY: ${{ secrets.OPENAI_API_KEY }}
          PR_AGENT_CONFIG_PATH: ".pr_agent.toml"
          OPENAI_API_BASE: "https://api.openai.com/v1"
        with:
          command: "/security_review"

  qodo-performance-review:
    name: 🚀 Performance Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5

      - name: 🤖 Qodo Performance Review
        uses: qodo-ai/pr-agent@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_KEY: ${{ secrets.OPENAI_API_KEY }}
          PR_AGENT_CONFIG_PATH: ".pr_agent.toml"
          OPENAI_API_BASE: "https://api.openai.com/v1"
        with:
          command: "/performance_review"

  qodo-test-review:
    name: 🧪 Test Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5

      - name: 🤖 Qodo Test Review
        uses: qodo-ai/pr-agent@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_KEY: ${{ secrets.OPENAI_API_KEY }}
          PR_AGENT_CONFIG_PATH: ".pr_agent.toml"
          OPENAI_API_BASE: "https://api.openai.com/v1"
        with:
          command: "/test_review"

  qodo-documentation-review:
    name: 📚 Documentation Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5

      - name: 🤖 Qodo Documentation Review
        uses: qodo-ai/pr-agent@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_KEY: ${{ secrets.OPENAI_API_KEY }}
          PR_AGENT_CONFIG_PATH: ".pr_agent.toml"
          OPENAI_API_BASE: "https://api.openai.com/v1"
        with:
          command: "/add_docs"
