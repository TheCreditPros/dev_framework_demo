# Qodo AI Interactive Commands
# Manual triggers for specific Qodo PR Agent tools

name: ðŸ¤– Qodo Interactive

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to analyze"
        required: true
        type: string
      command:
        description: "Qodo command to execute"
        required: true
        type: choice
        options:
          - "/review"
          - "/describe"
          - "/improve"
          - "/ask"
          - "/update_changelog"
          - "/add_docs"
          - "/security_review"
          - "/performance_review"
          - "/test_review"
          - "/similar_prs"
          - "/help"
          - "/analyze"
          - "/feedback"
          - "/checklist"
          - "/best_practices"
      custom_question:
        description: "Custom question for /ask command (optional)"
        required: false
        type: string

jobs:
  interactive-command:
    name: ðŸ¤– Execute Qodo Command
    runs-on: ubuntu-latest

    steps:
      - name: ðŸ“¥ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ðŸ”§ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: ðŸ“¦ Install Dependencies
        run: npm ci

      - name: ðŸ¤– Execute Qodo Command
        uses: qodo-ai/pr-agent@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_KEY: ${{ secrets.OPENAI_API_KEY }}
          PR_AGENT_CONFIG_PATH: ".pr_agent.toml"
          OPENAI_API_BASE: "https://api.openai.com/v1"
          PR_REVIEWER.EXTRA_INSTRUCTIONS: |
            CRITICAL REPOSITORY ANALYSIS REQUIREMENTS:

            REPOSITORY-WIDE CONTEXT ANALYSIS:
            - Analyze the entire repository structure and understand existing functionality
            - Review how proposed changes integrate with the established codebase
            - Identify potential conflicts with existing patterns and architecture
            - Consider the impact on all existing features and components
            - Understand the established coding standards and design principles

            BREAKAGE PREVENTION STANDARDS:
            - NEVER suggest changes that could break existing functionality
            - Ensure backward compatibility is maintained at all times
            - Verify API contracts and interfaces remain intact
            - Check for potential side effects on other components
            - Validate that existing tests continue to pass
            - Confirm no breaking changes to public APIs or interfaces
        with:
          command: ${{ github.event.inputs.command }}
          question: ${{ github.event.inputs.custom_question || '' }}

  batch-analysis:
    name: ðŸ“Š Batch Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.command == '/analyze'

    steps:
      - name: ðŸ“¥ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ðŸ”§ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: ðŸ“¦ Install Dependencies
        run: npm ci

      - name: ðŸ¤– Comprehensive Analysis
        uses: qodo-ai/pr-agent@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          command: "/review"

      - name: ðŸ¤– Code Improvements
        uses: qodo-ai/pr-agent@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          command: "/improve"

      - name: ðŸ¤– Security Analysis
        uses: qodo-ai/pr-agent@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          command: "/security_review"

      - name: ðŸ¤– Performance Analysis
        uses: qodo-ai/pr-agent@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          command: "/performance_review"
