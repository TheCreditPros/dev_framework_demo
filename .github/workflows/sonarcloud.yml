name: SonarCloud Analysis

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  sonarcloud:
    name: SonarCloud Multi-Stack Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, pdo_pgsql
          coverage: xdebug

      - name: Install JavaScript dependencies
        run: npm ci

      - name: Install PHP dependencies (if Laravel project)
        run: |
          if [ -f "composer.json" ]; then
            composer install --prefer-dist --no-progress --no-suggest
          fi

      - name: Run JavaScript tests with coverage
        run: |
          npm run test:coverage

      - name: Run PHP tests with coverage (if Laravel project)
        run: |
          if [ -f "composer.json" ] && [ -f "artisan" ]; then
            if [ -f "./vendor/bin/pest" ]; then
              ./vendor/bin/pest --coverage --coverage-clover=coverage/clover.xml
            elif [ -f "./vendor/bin/phpunit" ]; then
              ./vendor/bin/phpunit --coverage-clover=coverage/clover.xml
            fi
          fi

      - name: Run PHPStan analysis (if available)
        run: |
          if [ -f "./vendor/bin/phpstan" ]; then
            ./vendor/bin/phpstan analyse --error-format=checkstyle --no-progress > phpstan-report.xml || true
          fi

      - name: Run ESLint analysis
        run: |
          npx eslint . --format json --output-file eslint-report.json || true

      - name: SonarCloud Scan
        if: env.SONAR_TOKEN != ''
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=TheCreditPros_dev_framework_demo
            -Dsonar.organization=thecreditpros
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.php.coverage.reportPaths=coverage/clover.xml
            -Dsonar.php.phpstan.reportPaths=phpstan-report.xml
            -Dsonar.eslint.reportPaths=eslint-report.json

      - name: Quality Gate Check
        if: env.SONAR_TOKEN != ''
        uses: SonarSource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt
      - name: FCRA Compliance Validation (guarded)
        run: |
          echo "üè¶ Running FCRA compliance validation..."
          node -e "
            const fs = require('fs');
            const complianceIssues = [];

            // Basic source scan for sensitive patterns
            const sensitivePatterns = [
              /\b\d{3}-\d{2}-\d{4}\b/g, // SSN
              /4[0-9]{12}(?:[0-9]{3})?/g, // Credit card
              /(?:password|secret|key)\s*[:=]\s*['\"][^'\"\s]+/gi // Credentials
            ];

            function scanDirectory(dir) {
              const entries = fs.readdirSync(dir, { withFileTypes: true });
              for (const e of entries) {
                const p = `${dir}/${e.name}`;
                if (e.isDirectory() && !['node_modules','vendor','.git','coverage','dist','build'].includes(e.name)) scanDirectory(p);
                else if (e.isFile() && /(\.js|\.ts|\.php)$/.test(e.name)) {
                  try {
                    const content = fs.readFileSync(p, 'utf8');
                    for (const pattern of sensitivePatterns) if (pattern.test(content)) complianceIssues.push(`${p}: Potential sensitive data`);
                  } catch {}
                }
              }
            }

            scanDirectory('.');

            if (complianceIssues.length) {
              console.log('‚ùå FCRA compliance issues detected:');
              complianceIssues.forEach(i => console.log('  - ' + i));
              process.exit(1);
            }

            if (!process.env.SONAR_TOKEN) console.log('‚ÑπÔ∏è  SONAR_TOKEN not set; skipped Sonar quality gate enforcement');
            console.log('‚úÖ Compliance validation passed');
          "

      - name: Notify Teams on Quality Gate Failure
        if: failure()
        run: |
          if [ -f "scripts-complex/quality-gate-notifier.js" ]; then
            node scripts-complex/quality-gate-notifier.js sonarcloud-failure
          else
            echo "‚ö†Ô∏è  Quality gate notifier not available"
          fi
