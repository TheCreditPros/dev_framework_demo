// AI-Generated unit tests for creditScore.js
// Generated on: 2025-08-07T02:11:58.438Z
// Generated by: OpenAI GPT-4 via AI-SDLC Framework

import { describe, it, expect } from 'vitest';
const {
  calculateCreditScore,
  isValidCreditScore,
  getCreditScoreRange,
} = require('../../../src/sample/creditScore');

describe('Credit Score Calculation Module', () => {
  describe('calculateCreditScore', () => {
    it('should throw an error if no creditData is provided', () => {
      expect(() => calculateCreditScore()).toThrow(
        'Invalid credit data provided'
      );
    });

    it('should throw an error if creditData is not an object', () => {
      expect(() => calculateCreditScore('not an object')).toThrow(
        'Invalid credit data provided'
      );
    });

    it('should calculate the correct credit score', () => {
      const creditData = {
        paymentHistory: 80,
        creditUtilization: 30,
        creditHistory: 60,
        creditMix: 5,
        newCredit: 2,
      };
      expect(calculateCreditScore(creditData)).toBe(682);
    });

    it('should not exceed 850 even if calculated score is higher', () => {
      const creditData = {
        paymentHistory: 100,
        creditUtilization: 0,
        creditHistory: 120,
        creditMix: 10,
        newCredit: 0,
      };
      expect(calculateCreditScore(creditData)).toBe(850);
    });

    it('should not go below 300 even if calculated score is lower', () => {
      const creditData = {
        paymentHistory: 0,
        creditUtilization: 100,
        creditHistory: 0,
        creditMix: 0,
        newCredit: 10,
      };
      expect(calculateCreditScore(creditData)).toBe(300);
    });
  });

  describe('isValidCreditScore', () => {
    it('should return false if score is not a number', () => {
      expect(isValidCreditScore('not a number')).toBe(false);
    });

    it('should return false if score is less than 300', () => {
      expect(isValidCreditScore(299)).toBe(false);
    });

    it('should return false if score is more than 850', () => {
      expect(isValidCreditScore(851)).toBe(false);
    });

    it('should return true if score is between 300 and 850', () => {
      expect(isValidCreditScore(500)).toBe(true);
    });
  });

  describe('getCreditScoreRange', () => {
    it('should return "Invalid Score" if score is not valid', () => {
      expect(getCreditScoreRange(200)).toBe('Invalid Score');
    });

    it('should return the correct score range', () => {
      expect(getCreditScoreRange(800)).toBe('Exceptional');
      expect(getCreditScoreRange(740)).toBe('Very Good');
      expect(getCreditScoreRange(670)).toBe('Good');
      expect(getCreditScoreRange(580)).toBe('Fair');
      expect(getCreditScoreRange(300)).toBe('Poor');
    });
  });
});
